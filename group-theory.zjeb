;;; an excercise in expressiveness -- some group theory in ZJEB!
;;; (try to do this in Java and tell me it's comprehensible)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; a cheap ZJEB's srfi-1 substitute: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; omnipotent right fold and it's projections:
(def fold-r
     (bind (op e ()) e
	   (op e (x . xs)) (op x (fold-r op e xs))))

(def len
     (bind (xs) (fold-r (bind (_ t) (+ 1 t)) 0 xs)))

(def filter
     (bind (p? xs) (fold-r (bind (h t) (if (p? h) `(,h . ,t) t)) () xs)))

(def map
     (bind (f xs) (fold-r (bind (h t) `(,(f h) . ,t)) () xs)))

(def apd
     (bind (xs ys) (fold-r (bind (h t) `(,h . ,t)) ys xs)))

(def apd-map
     (bind (f xs) (fold-r apd () (map f xs))))

(def every?
     (bind (p? xs) (fold-r (bind (h t) (and (p? h) t)) T xs)))

(def any?
     (bind (p? xs) (fold-r (bind (h t) (or (p? h) t)) () xs)))


;;; isn't pattern-matching cool?
(def nth
     (bind (0 (x . xs)) x
	   (n (x . xs)) (nth (- n 1) xs)))

(def delete
     (bind (y (y . xs)) xs
	   (y (x . xs)) `(,x . ,(delete y xs))))

(def member? 
     (bind (x ()) ()
	   (x (x . xs)) T
	   (x (_ . xs)) (member? x xs)))

;;; and the third clause here is absolutely awesome:
(def iota
     (bind (0 acc) `(0 . ,acc)
	   (n acc) (iota (- n 1) `(,n . ,acc))
	   (n) (iota (- n 1) '())))


;;; now some "set theory" on lists: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; something "funny":
(def push (bind (x) (bind (xs) `(,x . ,xs))))

;;; a "cartesian product" of two lists:
(def cartesian
     (bind (xs ys)
	   (apd-map (bind (x) (map (bind (y) `(,x ,y)) ys)) xs)))

;;; a "powerset" of a list:
(def powerset
     (bind [()]
	   '(())
	   [(x . xs)]
	   ([bind (pow-xs)
		  (apd (map (push x) pow-xs) pow-xs)]
	    (powerset xs))))

(def subset?
     (bind (xs ys)
	   (every? (bind (x) (member? x ys)) xs)))
;; e.g. (subset? '(1 3) '(0 1 2 3 4)) => T

;;; all permutations of given list:
(def perms
     (bind [()]
	   '(())
	   [xs]
	   (apd-map (bind (x)
			  (map (push x)
			       (perms (delete x xs))))
		    xs)))

;;; now the abstract algebra: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; at least one definition here must suck, right?
(def modulo
     (bind (n m)
	   (if (< n 0)
	       (modulo (+ n m) m)
	       (if (or (< m n) (= m n))
		   (modulo (- n m) m)
		   n))))

;;; composing permutations:
(def compose-perms
     (bind (perm1 perm2)
	   (map (bind (p) (nth p perm1)) perm2)))

;;; is given operation closed over domain?
(def operation-closed?
     (bind (op dom)
	   (every? (bind ((x y)) (member? (op x y) dom))
		   (cartesian dom dom))))
;; e.g. (operation-closed? compose-perms (perms '(0 1 2))) => T

;;; are two operations equal wrt given domain?
(def operations-eq?
     (bind (op1 op2 dom)
	   (every? (bind ((x y))
			 (= (op1 x y) (op2 x y)))
		   (cartesian dom dom))))

;;; is e neutral element of op (wrt dom)?
(def neutral-element?
     (bind (e op dom)
	   (every? (bind (x)
			 (if (= (op e x) x)
			     (= (op x e) x)
			     ()))
		   dom)))
; e.g. (neutral-element? '(0 1 2) compose-perms (perms '(0 1 2))) => T

;;; is given operation wrt given domain associative?
(def associative?
     (bind (op dom)
	   (every? (bind ((x (y z)))
			 (= (op x (op y z))
			    (op (op x y) z)))
		   (cartesian dom (cartesian dom dom)))))
;;; e.g. (associative? compose-perms (perms (iota 3))) => T

;;; yeah...
(def commutative?
     (bind (op dom)
	   (every? (bind ((x y)) (= (op x y) (op y x)))
		   (cartesian dom dom))))
;;; e.g. (commutative? + (iota 10)) => T

(def has-unique-inverses?
     (bind (op dom neutr)
	   (every? (bind (x)
			 (= 1 (len (filter (bind (y)
						 (= (op x y) neutr))
					   dom))))
		   dom)))

;;; and the version without uniqueness requirement...
(def has-inverses?
     (bind (op dom neutr)
	   (every? (bind (x)
			 (any? (bind (y)
				     (= (op x y) neutr))
			       dom))
		   dom)))

;;; finally we can tell what a GROUP is!
(def group?
     (bind ((G e op))
	   (and (member? e G)
		(operation-closed? op G)
		(neutral-element? e op G)
		(associative? op G)
		(has-unique-inverses? op G e))))
;; e.g. (group? `((0) 0 ,+)) => T :)

;;; or even if it's abelian:
(def abelian-group?
     (bind ((G e op))
	   (and (group? `(,G ,e ,op))
		(commutative? op G))))

;;; two all-time classics:

;;; cyclic group of order n:
(def create-Zn
     (bind (n) `(,(iota n) 0 ,(bind (x y) (modulo (+ x y) n)))))
;; e.g. (group? (create-Zn 5)) => T
;; e.g. (abelian-group? (create-Zn 5)) => T

;;; n-th symmetric group:
(def create-Sn
     (bind (n) `(,(perms (iota n)) ,(iota n) ,compose-perms)))
;; e.g. (group? (create-Sn 3)) => T
;; e.g. (abelian-group? (create-Sn 3)) => () 


;;; now ** THE FIRST GROUP-THEORETIC CONSTRUCTION **:
(def direct-product
     (bind ((G1 e1 op1) (G2 e2 op2))
	   `(,(cartesian G1 G2)
	     (,e1 ,e2)
	     ,(bind ((x1 x2) (y1 y2))
		    `(,(op1 x1 y1) ,(op2 x2 y2))))))
;; e.g. (group? (direct-product (create-Zn 2) (create-Zn 2))) => T
;; e.g. (group? (direct-product (create-Sn 3) (create-Zn 2))) => T (now finally something takes at least a few seconds!)

;;; is given subset of G's universe a group (with the same e and op)?
(def subgroup?
     (bind (H (G e op))
	   (and (member? e H)
		(subset? H G)
		(operation-closed? op H)
		(has-inverses? op H e))))
;; e.g. (subgroup? '((0 1 2) (2 1 0)) (create-Sn 3)) => T

;;; ok, at least once we'd like to have an accessor:
(def universe (bind ((G e op)) G))
;; e.g. (universe (create-Sn 3)) => ((0 1 2) (0 2 1) (1 0 2) (1 2 0) (2 0 1) (2 1 0))

(def all-subgroups
     (bind (Gr)
	   (filter (bind (H) (subgroup? H Gr))
		   (powerset (universe Gr)))))
;; e.g. (all-subgroups (create-Sn 3))
;; => (((0 1 2) (0 2 1) (1 0 2) (1 2 0) (2 0 1) (2 1 0))
;;     ((0 1 2) (0 2 1))
;;     ((0 1 2) (1 0 2))
;;     ((0 1 2) (1 2 0) (2 0 1))
;;     ((0 1 2) (2 1 0))
;;     ((0 1 2)))

;; Now that was neat!
;;; Ok, it's dawn and I can't see very well, so that's all for now.
;;; "Auf Wiedersehen!" ;)


;;; todo (perhaps some day):
;;; -- normal subgroups,
;;; -- homomorphisms,
;;; -- Cayley's theorem...
